

 BackTracking : SUDOKO SOLVER
 
 *****************************
 
 
 class Solution {
    
    bool IsValidBoard(vector<vector<char>> &board,char k,int r,int c)
    {
        for(int i=0;i<9;i++)
        {
            if(board[i][c]==k)
            return false;
    
            if(board[r][i]==k)
                return false;
            
            if(board[3*(r/3) + i/3][3*(c/3) + i%3] == k)
                return false;
            
        }
        
        return true;
    }
    
    bool Solve(vector<vector<char>> &board)
    {
        
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                
                if(board[i][j]=='.')
                {
                    for(char k='1';k<='9';k++)
                    {
                        
                        
                        if(IsValidBoard(board,k,i,j))
                        {
                            board[i][j]=k;
                            
                            bool val = Solve(board);
                            if(val)
                                return true;
                            else
                                board[i][j]='.';
                                
                        }
                        
                        
                    }
                    
                    return false;
                }
            }
        }
        
        return true;
    }
    
    
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        
         Solve(board);
        
    }
};