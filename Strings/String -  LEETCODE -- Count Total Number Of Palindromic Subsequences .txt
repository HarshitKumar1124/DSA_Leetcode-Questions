


STRING LEETCODE : 

Count Total Number Of Palindromic Subsequences : 

https://www.youtube.com/watch?v=YHSjvswCXC8

https://leetcode.com/contest/biweekly-contest-92/problems/count-palindromic-subsequences/

*************************************************

class Solution {
public:
    int countPalindromes(string s) {
        
        // very very important question : 
        
        //https://www.youtube.com/watch?v=YHSjvswCXC8
        
        // need to deal with prefix and surfix : 
        
        //Gap filling - strategy : 
        
        
        int n = s.size();
        
        vector<vector<int>> DP(n,vector<int>(n,-1));
        
        
        for(int i=0;i<s.size();i++)
        {
            DP[i][i]=1;  //for subsequence length l=1
            
            //for subsequence length =2;
            
            if(i!=n-1)
            {
                if(s[i]==s[i+1])
                    DP[i][i+1]=3;
                else
                    DP[i][i+1]=2;
            }
        }
        
        
        // current answer =  prefix nswer + surfix answer + .....
        
        for(int l=3;l<=n;l++)
        {
            for(int i=0;i<=n-l;i++)
            {
                int j = i+l-1;
                
                if(s[i]==s[j])
                    DP[i][j] = DP[i][j-1] + DP[i+1][j] + 1;
                else
                    DP[i][j] = DP[i][j-1] + DP[i+1][j] - DP[i+1][j-1];
            }
        }
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                cout<<DP[i][j]<<" ";    
            
            cout<<endl;
        }
        
        return 0;
        
        
    }
};