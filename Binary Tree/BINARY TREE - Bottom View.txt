


BINARY TREE - Bottom View

***************************

# include <bits/stdc++.h>
using namespace std;


class Node{
public:
	int data;
	Node* left=NULL;
	Node* right=NULL;

	Node(int x)
	{
		data=x;
	}
};


vector<int> TopView(Node* root)
{

if(root==NULL)
	return {};

	queue<pair<Node*,int>> q;
    q.push(make_pair(root,0));
    map<int,int> mp;

    while(q.size()!=0)
    {
    	pair<Node*,int> temp = q.front();
    	q.pop();

    	Node* ptr = temp.first;
    	int line_idx = temp.second;

    	if(ptr->left!=NULL)
    		q.push(make_pair(ptr->left,line_idx-1));

    	if(ptr->right!=NULL)
    		q.push(make_pair(ptr->right,line_idx+1));

    	
    		mp[line_idx]=ptr->data;
    }

    vector<int> ans;

    for(auto x = mp.begin();x!=mp.end();x++)
    	ans.push_back(x->second);

    return ans;

}


int main()
{
	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);

	root->left->left=new Node(4);
	root->left->right = new Node(5);
	root->left->right->left = new Node(6);

	vector<int> ans = TopView(root);


	for(auto x:ans)
		cout<<x<<" ";
}