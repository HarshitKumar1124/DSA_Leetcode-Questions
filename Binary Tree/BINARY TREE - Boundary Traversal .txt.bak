


BINARY TREE : Boundary Traversal 

*******************************

class Solution {
    
    int n1;
    
    vector<int> LeftBoundry(Node* root)
    {
        if(root==nullptr)
        return {};
        
        vector<int> ans;
        
        while(root!=nullptr)
        {
            ans.push_back(root->data);
            
            if(root->left!=nullptr)
            root=root->left;
            else if(root->right!=nullptr and ans.size()!=1)
            root=root->right;
            else
            break;
        }
        
        if(ans.size()!=1)
        ans.pop_back();
        
        return ans;
    }
    
    vector<int> RightBoundry(Node* root)
    {
        if(root==nullptr)
        return {};
        
        vector<int> ans;
        
      while(root!=nullptr)
      {
          ans.push_back(root->data);
           
          if(root->right)
          root=root->right;
          else if(root->left and ans.size()!=1)
          root=root->left;
          else
          break;
      }
    
        
        ans.pop_back();
        
        
        if(ans.size()!=0)
        {
            ans.erase(ans.begin());
        
        reverse(ans.begin(),ans.end());
        
        }
        return ans;
    }
    
    vector<int> Inorder(Node* root)
    {
        
    if(root==nullptr)
    return {};

    vector<int> ans;
    
    
    int n=0;
     stack<Node*> stk;
    
    while(stk.size()!=0 || root!=nullptr)
    {
        if(root!=nullptr)
        {
            stk.push(root);
            root=root->left;
        }
        else
        {
            Node* temp = stk.top();
            stk.pop();
            
            if(temp->left==nullptr and temp->right==nullptr)
            ans.push_back(temp->data);
            n++;
            
            
            root=temp->right;
        }
    }
   
    n1=n;
    return ans;
    }
    
public:
    vector <int> boundary(Node *root)
    {
        if(root==nullptr)
        return {};
        
         vector<int> leafs = Inorder(root);
         
         if(n1==1)
         return leafs;
        
        vector<int> leftSkew = LeftBoundry(root);
        
        vector<int> rightSkew = RightBoundry(root);
        
        
        
        vector<int> ans;
        
        ans.insert(ans.end(),leftSkew.begin(),leftSkew.end());
          ans.insert(ans.end(),leafs.begin(),leafs.end());
        ans.insert(ans.end(),rightSkew.begin(),rightSkew.end());
        
        return ans;
    }
};

//{ Driver Code Starts.

/* Driver program to test size function*/

int main() {
    int t;
    string tc;
    getline(cin, tc);
    t=stoi(tc);
    while(t--)
    {
        string s ,ch;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        vector <int> res = ob.boundary(root);
        for (int i : res) cout << i << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends